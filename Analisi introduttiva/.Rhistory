library(readr)
nati <- read_csv("Nati totali.csv",
col_types = cols(ITTER107 = col_skip(),
TIPO_DATO15 = col_skip(), `Tipo dato` = col_skip(),
`Seleziona periodo` = col_skip(),
`Flag Codes` = col_skip(), Flags = col_skip()))
length(unique(nati$Territorio))
prov <- sort(unique(nati$Territorio))
years <- sort(unique(nati$TIME))[4:21]
birth <- matrix(rep(0, length(years)*length(prov)), nrow = length(prov), ncol = length(years))
for(p in 1:length(prov))
{
for(y in 1:length(years))
{
birth[p,y] <- nati$Value[which(nati$Territorio == prov[p] & nati$TIME == years[y])]
}
}
row.names(birth) <- prov
colnames(birth) <- years
rm(nati)
matplot(t(birth), type='l')
res <- read_csv("Residenti storico.csv",
col_types = cols(ITTER107 = col_skip(), TIPO_DATO15 = col_skip(), `Tipo dato` = col_skip(),
ETA1 = col_skip(), `Classe di età` = col_skip(),SEXISTAT1 = col_skip(), Sesso = col_skip(),
CITTADINANZA = col_skip(), Cittadinanza = col_skip(), `Seleziona periodo` = col_skip(),
`Flag Codes` = col_skip(), Flags = col_skip()))
popolazione <- matrix(rep(0, length(years)*length(prov)), nrow = length(prov), ncol = length(years))
for(p in 1:length(prov))
{
for(y in 1:length(years))
{
popolazione[p,y] <- res$Value[which(res$Territorio == prov[p] & res$TIME == years[y])]
}
}
nati <- birth/popolazione
rm(list = c('birth', 'res', 'popolazione'))
matplot(t(nati), type='l')
matplot(t(nati), type='l', x = years)
View(as.matrix(nati[, 1]))
years[18]
temp = nati[1] - nati[18]
temp = nati[,1] - nati[,18]
which.max(temp)
plot(temp)
max(temp)
nati[9,]
which.min(temp)
which.min(temp)
temp[41]
which(temp < )
which(temp < 0)
which(temp > 0)
which(temp < 0)
abline ( h 0 0)
abline ( h = 0)
abline ( v = 0)
abline ( h = 0)
plot(temp, xlim= c(-0.05, 0.1))
plot(temp, xlim= c(-0.05, 0.1)))
plot(temp)
plot(temp, ylim= c(-0.05, 0.1))
plot(temp, ylim= c(-0.005, 0.01))
plot(temp, ylim= c(-0.005, 0.001))
plot(temp, ylim= c(-0.005, 0.05))
plot(temp, ylim= c(-0.005, 0.005))
plot(temp, ylim= c(-0.001, 0.005))
plot(temp, ylim= c(-0.0005, 0.005))
abline(h = 0)
abline(h = 0, col = 2)
View(as.matrix(nati[, 1]))
View(as.matrix(nati[, 18]))
library(fda)
data <- rbind(prov, nati[,1])
data <- cbind(prov, nati[,1])
data <- cbind(prov, nati[,1])
data <- rbind(prov, nati[,1])
View(data)
data <- rbind(prov, nati[,1], deparse.level = 1)
data <- rbind(prov, nati[,1], deparse.level = 3)
data <- rbind(prov, nati[,1])
View(data)
data <- rbind(prov,temp)
View(data)
rm(data)
prov
prov
print(prov)
as.matrix(nati)
print(prov)
print(prov)
print(as.matrix(prov))
View(cbind(prov, nati[,1]))
View(cbind(nati[,1]))
m1 = colMeans(nati[,1:9])
m1 = means(nati[,1:9])
m1 = mean(nati[,1:9])
m1 = apply(nati[,1:9])
m1 = apply(mean,nati[,1:9])
m1 = apply(means,nati[,1:9])
m1 = tapply(mean,nati[,1:9])
m1 = sapply(mean,nati[,1:9])
#Analisi funzionale (depth measure) sulla fda e magari derivate?
#Altro su indici specifici?
#->Flourish per grafici fighi
d1 = nati[,1:9]
d2 = nati[,10:18]
sum(which(d1-d2>0))
sum(d1-d2>0)
sum(d1-d2>0) / (d1-s2)
sum(d1-d2>0) / (d1-d2)
d1-d2
d1-d2
mean(d1)
tapply(d1, mean)
tapply(as.matrix(d1), mean)
tapply(as.vector(d1), mean)
colMeans(t(d1))
m1  = colMeans(d1)
m1 - colMeans(t(d1))
m1  = colMeans(t(d1))
m2  = colMeans(t(d2))
points(m2, col  = 2)
plot( m1, col = 3)
points(m2, col  = 2)
plot( m1 , col = 3, pch = 16)
points(m2 , col = 2, pch = 16)
points(m2 , col = 3, pch = 16)
plot( m1 , col = 2, pch = 16)
points(m2 , col = 3, pch = 16)
m2[3,]
m2[3]
m1[3]
diff = m1-m2
which.min(diff)
diff[41]
iserniaDiff = diff[41]
rm(iserniaDiff)
isernia = rep(1,17)
isernia = nati[41,]
iserniaDiff = diff(as.vector(isernia))
nati[41,]
for(i in 2:17){
iserniaDiff[i] /= isernia[i-1]
iserniaDiff[i] = iserniaDiff[i]/isernia[i-1]
i = 0
for(i in 2:17){
iserniaDiff[i] = iserniaDiff[i]/isernia[i-1]
}
iserniaDiff = diff(as.vector(isernia))
perc = rep(1,16)
for(i in 2:17){
perc[i] = iserniaDiff[i]/isernia[i-1]
}
perc[i] = 100*iserniaDiff[i]/isernia[i-1]
for(i in 2:17){
perc[i] = 100*iserniaDiff[i]/isernia[i-1]
}
perc[i] = 100*iserniaDiff[i+1]/isernia[i]
for(i in 1:17){
perc[i] = 100*iserniaDiff[i+1]/isernia[i]
}
for(i in 1:16){
perc[i] = 100*iserniaDiff[i+1]/isernia[i]
}
rm(perc)
for(i in 1:16){
perc[i] = 100*iserniaDiff[i+1]/isernia[i]
}
i = 0
perc = rep(1,16)
perc = rep(1,17)
for(i in 1:17){
perc[i] = 100*iserniaDiff[i+1]/isernia[i]
}
perc
perc = rep(1,16)
for(i in 1:16){
perc[i] = 100*iserniaDiff[i+1]/isernia[i]
}
perc
count(perc<0)
sum(perc<0)
sum(perc>0)
isernia = nati[3,]
iserniaDiff = diff(as.vector(isernia))
i = 0
perc = rep(1,16)
for(i in 1:16){
perc[i] = 100*iserniaDiff[i+1]/isernia[i]
}
perc
for(i in 1:16){
perc[i] = 100*anconaDiff[i+1]/ancona[i]
}
ancona = nati[3,]
anconaDiff = diff(as.vector(ancona))
i = 0
perc = rep(1,16)
for(i in 1:16){
perc[i] = 100*anconaDiff[i+1]/ancona[i]
}
# Import Italy shapefile
ita_map = readOGR('C:/[...]/Limiti01012020_g/ProvCM01012020_g',
'ProvCM01012020_g_WGS84', stringsAsFactors = FALSE)
library(dplyr)
library(leaflet)
install.packages("leaflet")
# Import Italy shapefile
ita_map = readOGR('C:/[...]/Limiti01012020_g/ProvCM01012020_g',
'ProvCM01012020_g_WGS84', stringsAsFactors = FALSE)
library(rgdal)
install.packages("rgdal")
# Import Italy shapefile
ita_map = readOGR('C:/[...]/Limiti01012020_g/ProvCM01012020_g',
'ProvCM01012020_g_WGS84', stringsAsFactors = FALSE)
library(rgdal)
# Import Italy shapefile
ita_map = readOGR('C:/[...]/Limiti01012020_g/ProvCM01012020_g',
'ProvCM01012020_g_WGS84', stringsAsFactors = FALSE)
library(rgdal)
install.packages("rgdal")
view(m1)
view(m2)
View(m2)
View(cbind(m2))
View(cbind(m1))
View(cbind(diff))
plot(temp, ylim= c(-0.0005, 0.005))
abline(h = 0, col = 2)
plot( m1 , col = 2, pch = 16)
points(m2 , col = 3, pch = 16)
ancona = nati[3,]
anconaDiff = diff(as.vector(ancona))
i = 0
perc = rep(1,16)
for(i in 1:16){
perc[i] = 100*anconaDiff[i+1]/ancona[i]
}
perc
library(roahd)
nati <- read_csv("Nati totali.csv",
col_types = cols(ITTER107 = col_skip(),
TIPO_DATO15 = col_skip(), `Tipo dato` = col_skip(),
`Seleziona periodo` = col_skip(),
`Flag Codes` = col_skip(), Flags = col_skip()))
nati <- read_csv("Nati totali.csv",
col_types = cols(ITTER107 = col_skip(),
TIPO_DATO15 = col_skip(), `Tipo dato` = col_skip(),
`Seleziona periodo` = col_skip(),
`Flag Codes` = col_skip(), Flags = col_skip()))
nati <- read_csv("Nati totali.csv",
col_types = cols(ITTER107 = col_skip(),
TIPO_DATO15 = col_skip(), `Tipo dato` = col_skip(),
`Seleziona periodo` = col_skip(),
`Flag Codes` = col_skip(), Flags = col_skip()))
library(readr)
nati <- read_csv("Nati totali.csv",
col_types = cols(ITTER107 = col_skip(),
TIPO_DATO15 = col_skip(), `Tipo dato` = col_skip(),
`Seleziona periodo` = col_skip(),
`Flag Codes` = col_skip(), Flags = col_skip()))
length(unique(nati$Territorio))
prov <- sort(unique(nati$Territorio))
years <- sort(unique(nati$TIME))[4:21]
birth <- matrix(rep(0, length(years)*length(prov)), nrow = length(prov), ncol = length(years))
for(p in 1:length(prov))
{
for(y in 1:length(years))
{
birth[p,y] <- nati$Value[which(nati$Territorio == prov[p] & nati$TIME == years[y])]
}
}
row.names(birth) <- prov
colnames(birth) <- years
rm(nati)
matplot(t(birth), type='l')
res <- read_csv("Residenti storico.csv",
col_types = cols(ITTER107 = col_skip(), TIPO_DATO15 = col_skip(), `Tipo dato` = col_skip(),
ETA1 = col_skip(), `Classe di età` = col_skip(),SEXISTAT1 = col_skip(), Sesso = col_skip(),
CITTADINANZA = col_skip(), Cittadinanza = col_skip(), `Seleziona periodo` = col_skip(),
`Flag Codes` = col_skip(), Flags = col_skip()))
popolazione <- matrix(rep(0, length(years)*length(prov)), nrow = length(prov), ncol = length(years))
for(p in 1:length(prov))
{
for(y in 1:length(years))
{
popolazione[p,y] <- res$Value[which(res$Territorio == prov[p] & res$TIME == years[y])]
}
}
nati <- birth/popolazione
rm(list = c('birth', 'res', 'popolazione'))
matplot(t(nati), type='l', x = years)
temp = nati[,1] - nati[,18]
which.min(temp)
plot(temp, ylim= c(-0.0005, 0.005))
abline(h = 0, col = 2)
View(as.matrix(nati[, 1]))
View(as.matrix(nati[, 18]))
band_depth = BD(Data = t(nati) )
plot(band_depth)
band_depth = BD(Data = nati)
which.max(BD)
which.max(band_depth)
which.min(band_depth)
median_curve <- median_fData(natiype = "MBD") # still an fData object
median_curve <- median_fData(nati, type = "MBD") # still an fData object
median_curve_manual <- univariate_fdata[which.max(band_depth),]
median_curve_manual <- nati[which.max(band_depth),]
which.max(band_depth)
plot(nati)
grid_ecg <- seq(median_curve_manual$t0,median_curve_manual$tP,by=median_curve_manual$h)
plot(nati)
plot(nati)
View(nati)
plot(t(nati)
plot(t(nati))
plot(t(nati))
matplot(t(nati))
matplot(nati)
matplot(nati)
matplot(t(nati), type='l', x = years)
plot(t(nati), type='l', x = years)
lines(grid_ecg,median_curve_manual$values)
grid_ecg <- seq(median_curve_manual$t0,median_curve_manual$tP,by=median_curve_manual$h)
data = fData(grid = years, data = nati)
data = fData(grid = years, values = nati)
band_depth = BD(Data = nati)
grid_ecg <- seq(median_curve_manual$t0,median_curve_manual$tP,by=median_curve_manual$h)
median_curve_manual <- data[which.max(band_depth),]
grid_ecg <- seq(median_curve_manual$t0,median_curve_manual$tP,by=median_curve_manual$h)
matplot(t(nati), type='l', x = years)
lines(grid_ecg,median_curve_manual$values)
plot(f_data)
plot(data)
lines(grid_ecg,median_curve_manual$values)
lines(grid_ecg,median_curve_manual$values, lw = 10)
plot(data)
lines(grid_ecg,median_curve_manual$values, lw = 3)
lines(grid_ecg,median_curve_manual$values, lw = 2)
lines(grid_ecg,median_curve_manual$values, lw = 20)
plot(data)
lines(grid_ecg,median_curve_manual$values, lw = 2)
median.mbd =  median_fData(fData = f_data, type = "MBD")
median.mbd =  median_fData(fData = data, type = "MBD")
library(DepthProc)
lines(grid, median.mbd$values, col="black")
plot(data)
lines(grid, median.mbd$values, col="black")
lines(yaers, median.mbd$values, col="black")
lines(years, median.mbd$values, col="black")
library(DepthProc)
tukey.depth=depth(u=data$values,method='Tukey')
tukey.deepest.idx = which(tukey.depth==max(tukey.depth))
lines(grid, f_data$values[tukey.deepest.idx[1],], col="red")
lines(years, f_data$values[tukey.deepest.idx[1],], col="red")
lines(years, data$values[tukey.deepest.idx[1],], col="red")
lines(years, data$values[tukey.deepest.idx[1],], col="red", lwd = 2)
lines(grid_ecg,median_curve_manual$values, lw = 2)
mei.data= MEI(data)
which.min(mei.data)
which.max(mei.data)
lines(years, data$values[tukey.deepest.idx[1],], col="red", lwd)
lines(years, data$values[15,], col="green", lwd = 2)
lines(years, data$values[15,], col="blue", lwd = 2)
lines(years, data$values[15,], col="green", lwd = 2)
lines(years, data$values[61,], col="blue", lwd = 2)
plot(mei.data. pch = 16)
plot(mei.data,pch = 16)
mei.data[15]
mei.data[61]
mei.data= HI(data)
which.max(mei.data)
lines(years, data$values[15,], col="green", lwd = 2)
which.min(mei.data)
plot(data)
lines(years, data$values[2], col="green", lwd = 2)
plot(data)
lines(grid_ecg,median_curve_manual$values, lw = 2)
lines(years, data$values[tukey.deepest.idx[1],], col="red", lwd = 2)
lines(years, data$values[2], col="green", lwd = 2)
lines(years, data$values[2,], col="green", lwd = 2)
lines(years, data$values[61,], col="blue", lwd = 2)
lines(years, data$values[15,], col="green", lwd = 2)
mei.data= EI(data)
which.max(mei.data)
which.min(mei.data)
lines(years, data$values[15,], col="green", lwd = 2)
lines(years, data$values[61,], col="blue", lwd = 2)
lines(years, data$values[12,], col="green", lwd = 2)
mei.data= MEI(data)
which.max(mei.data)
which.min(mei.data)
lines(years, data$values[15,], col="green", lwd = 2)
lines(years, data$values[61,], col="blue", lwd = 2)
plot(mei.data,pch = 16)
plot(data)
mei.data= MEI(data)
which.max(mei.data)
which.min(mei.data)
lines(years, data$values[15,], col="green", lwd = 2)
lines(years, data$values[61,], col="blue", lwd = 2)
lines(years, data$values[tukey.deepest.idx[1],], col="red", lwd = 2)
tukey.deepest.idx = which(tukey.depth==max(tukey.depth))
data[tukey.deepest.idx,]
data[93,]
nati[93,]
nati[93]
prov[93]
lines(years, data$values[15,], col="green", lwd = 2)
plot(data)
mei.data= MEI(data)
which.max(mei.data)
which.min(mei.data)
lines(years, data$values[15,], col="green", lwd = 2)
lines(years, data$values[61,], col="blue", lwd = 2)
lines(years, data$values[tukey.deepest.idx[1],], col="red", lwd = 2)
